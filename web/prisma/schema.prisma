// Prisma schema for the web app (MongoDB)

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // set DATABASE_URL in web/.env
}

model Category {
  id        String    @id @default(cuid()) @map("_id")
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Service {
  serviceId    String    @id @default(cuid()) @map("_id")
  name         String
  description  String
  rentalPrice  Float // Ціна за оренду (наприклад, за день)
  deposit      Float? // Застава, яку потрібно залишити
  available    Boolean   @default(true) // Чи доступний інструмент зараз
  quantity     Int       @default(1) // Кількість доступних одиниць
  condition    String? // Стан інструменту (новий, вживаний, потребує ремонту)
  usageNotes   String? // Інструкції по використанню
  rentalPeriod Int? // Мінімальний термін оренди в днях
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  deletedBy    String?

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  // Відносини
  images    Image[]
  seo       Seo?
  analytics ServiceAnalytics?
  rentals   Rental[] // Список оренд цього інструменту
  discount  Discount[]

  @@index([name])
  @@index([categoryId])
  @@index([available])
  @@index([createdAt])
}

model Image {
  id        String   @id @default(cuid()) @map("_id") // Unique image identifier
  serviceId String // Foreign key for service
  service   Service  @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now()) // Timestamp when the image was added

  @@index([serviceId])
}

model Discount {
  id              String    @id @default(cuid()) @map("_id") // Unique discount identifier
  serviceId       String    @unique // Foreign key for service (One-to-One)
  service         Service   @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  discountPrice   Float // Discounted price
  discountEndDate DateTime? // End date for the discount

  @@index([discountEndDate])
}

model Seo {
  id             String   @id @default(cuid()) @map("_id") // Unique SEO identifier
  serviceId      String   @unique // Foreign key for service (One-to-One)
  service        Service  @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  seoTitle       String? // SEO-friendly title for the service
  seoDescription String? // SEO meta description for better search engine visibility
  slug           String?  @unique // URL-friendly identifier for the service (e.g., "permanent-makeup")
  tags           String[] // Search tags to improve discoverability
}

model ServiceAnalytics {
  id           String  @id @default(cuid()) @map("_id") // Unique identifier
  serviceId    String  @unique // Foreign key for service (One-to-One)
  service      Service @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  views        Int     @default(0) // Number of times the service has been viewed
  rating       Float? // Average rating of the service from customer reviews
  reviewsCount Int     @default(0) // Number of reviews received

  @@index([views])
  @@index([rating])
}

model Rental {
  id         String       @id @default(cuid()) @map("_id")
  serviceId  String
  userId     String
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  returned   Boolean      @default(false)
  status     RentalStatus @default(PENDING)

  service Service @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  // user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([userId])
  @@index([startDate])
}

enum RentalStatus {
  PENDING // Оренда створена, очікує підтвердження
  ACTIVE // Оренда в дії
  RETURNED // Інструмент повернуто
  CANCELLED // Оренду скасовано
  OVERDUE // Протермінована оренда
}

model Banner {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String?
  ctaText     String?
  ctaLink     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String
}
